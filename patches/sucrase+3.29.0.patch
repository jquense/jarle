diff --git a/node_modules/sucrase/dist/esm/index.js b/node_modules/sucrase/dist/esm/index.js
index c801dc0..08411f4 100644
--- a/node_modules/sucrase/dist/esm/index.js
+++ b/node_modules/sucrase/dist/esm/index.js
@@ -124,3 +124,6 @@ function getSucraseContext(code, options) {
   }
   return {tokenProcessor, scopes, nameManager, importProcessor, helperManager};
 }
+
+
+export { RootTransformer, getSucraseContext }
diff --git a/node_modules/sucrase/dist/esm/parser/traverser/statement.js b/node_modules/sucrase/dist/esm/parser/traverser/statement.js
index 2ec57da..c6e6479 100644
--- a/node_modules/sucrase/dist/esm/parser/traverser/statement.js
+++ b/node_modules/sucrase/dist/esm/parser/traverser/statement.js
@@ -87,7 +87,7 @@ import {
 } from "./util";
 
 export function parseTopLevel() {
-  parseBlockBody(tt.eof);
+  parseBlockBody(tt.eof, true);
   state.scopes.push(new Scope(0, state.tokens.length, true));
   if (state.scopeDepth !== 0) {
     throw new Error(`Invalid scope depth at end of file: ${state.scopeDepth}`);
@@ -102,7 +102,7 @@ export function parseTopLevel() {
 // `if (foo) /blah/.exec(foo)`, where looking at the previous token
 // does not help.
 
-export function parseStatement(declaration) {
+export function parseStatement(declaration, isTopLevel) {
   if (isFlowEnabled) {
     if (flowTryParseStatement()) {
       return;
@@ -111,10 +111,10 @@ export function parseStatement(declaration) {
   if (match(tt.at)) {
     parseDecorators();
   }
-  parseStatementContent(declaration);
+  parseStatementContent(declaration, isTopLevel);
 }
 
-function parseStatementContent(declaration) {
+function parseStatementContent(declaration, isTopLevel) {
   if (isTypeScriptEnabled) {
     if (tsTryParseStatementContent()) {
       return;
@@ -122,6 +122,7 @@ function parseStatementContent(declaration) {
   }
 
   const starttype = state.type;
+  const startTokenIndex = state.tokens.length
 
   // Most types of statements are recognized by the keyword they
   // start with. Many are trivial to parse, some require a bit of
@@ -145,11 +146,13 @@ function parseStatementContent(declaration) {
       if (lookaheadType() === tt.dot) break;
       if (!declaration) unexpected();
       parseFunctionStatement();
+      state.tokens[startTokenIndex].isTopLevel = isTopLevel;
       return;
 
     case tt._class:
       if (!declaration) unexpected();
       parseClass(true);
+      state.tokens[startTokenIndex].isTopLevel = isTopLevel;
       return;
 
     case tt._if:
@@ -157,6 +160,7 @@ function parseStatementContent(declaration) {
       return;
     case tt._return:
       parseReturnStatement();
+      state.tokens[startTokenIndex].isTopLevel = isTopLevel;
       return;
     case tt._switch:
       parseSwitchStatement();
@@ -208,6 +212,7 @@ function parseStatementContent(declaration) {
         if (match(tt._function) && !canInsertSemicolon()) {
           expect(tt._function);
           parseFunction(functionStart, true);
+          state.tokens[startTokenIndex].isTopLevel = isTopLevel;
           return;
         } else {
           state.restoreFromSnapshot(snapshot);
@@ -232,11 +237,15 @@ function parseStatementContent(declaration) {
       simpleName = token.contextualKeyword;
     }
   }
+
+  state.tokens[startTokenIndex].isTopLevel = isTopLevel;
+
   if (simpleName == null) {
     semicolon();
     return;
   }
   if (eat(tt.colon)) {
+    state.tokens[startTokenIndex].isTopLevel = isTopLevel;
     parseLabeledStatement();
   } else {
     // This was an identifier, so we might want to handle flow/typescript-specific cases.
@@ -504,9 +513,9 @@ export function parseBlock(isFunctionScope = false, contextId = 0) {
   state.scopeDepth--;
 }
 
-export function parseBlockBody(end) {
+export function parseBlockBody(end, isTopLevel) {
   while (!eat(end) && !state.error) {
-    parseStatement(true);
+    parseStatement(true, isTopLevel);
   }
 }
 
diff --git a/node_modules/sucrase/dist/index.js b/node_modules/sucrase/dist/index.js
index d408a7e..d0e69bb 100644
--- a/node_modules/sucrase/dist/index.js
+++ b/node_modules/sucrase/dist/index.js
@@ -14,21 +14,6 @@ var _getTSImportedNames = require('./util/getTSImportedNames'); var _getTSImport
 
 
 
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
  function getVersion() {
   /* istanbul ignore next */
   return "3.29.0";
@@ -124,3 +109,6 @@ function getSucraseContext(code, options) {
   }
   return {tokenProcessor, scopes, nameManager, importProcessor, helperManager};
 }
+
+exports.getSucraseContext = getSucraseContext;
+exports.RootTransformer = _RootTransformer2.default
diff --git a/node_modules/sucrase/dist/parser/traverser/statement.js b/node_modules/sucrase/dist/parser/traverser/statement.js
index d2c109a..9d870fa 100644
--- a/node_modules/sucrase/dist/parser/traverser/statement.js
+++ b/node_modules/sucrase/dist/parser/traverser/statement.js
@@ -87,7 +87,7 @@ var _lval = require('./lval');
 var _util = require('./util');
 
  function parseTopLevel() {
-  parseBlockBody(_types.TokenType.eof);
+  parseBlockBody(_types.TokenType.eof, true);
   _base.state.scopes.push(new (0, _state.Scope)(0, _base.state.tokens.length, true));
   if (_base.state.scopeDepth !== 0) {
     throw new Error(`Invalid scope depth at end of file: ${_base.state.scopeDepth}`);
@@ -102,7 +102,7 @@ var _util = require('./util');
 // `if (foo) /blah/.exec(foo)`, where looking at the previous token
 // does not help.
 
- function parseStatement(declaration) {
+ function parseStatement(declaration, isTopLevel) {
   if (_base.isFlowEnabled) {
     if (_flow.flowTryParseStatement.call(void 0, )) {
       return;
@@ -111,10 +111,10 @@ var _util = require('./util');
   if (_tokenizer.match.call(void 0, _types.TokenType.at)) {
     parseDecorators();
   }
-  parseStatementContent(declaration);
+  parseStatementContent(declaration, isTopLevel);
 } exports.parseStatement = parseStatement;
 
-function parseStatementContent(declaration) {
+function parseStatementContent(declaration, isTopLevel) {
   if (_base.isTypeScriptEnabled) {
     if (_typescript.tsTryParseStatementContent.call(void 0, )) {
       return;
@@ -122,6 +122,7 @@ function parseStatementContent(declaration) {
   }
 
   const starttype = _base.state.type;
+  const startTokenIndex = _base.state.tokens.length
 
   // Most types of statements are recognized by the keyword they
   // start with. Many are trivial to parse, some require a bit of
@@ -145,11 +146,13 @@ function parseStatementContent(declaration) {
       if (_tokenizer.lookaheadType.call(void 0, ) === _types.TokenType.dot) break;
       if (!declaration) _util.unexpected.call(void 0, );
       parseFunctionStatement();
+      _base.state.tokens[startTokenIndex].isTopLevel = isTopLevel;
       return;
 
     case _types.TokenType._class:
       if (!declaration) _util.unexpected.call(void 0, );
       parseClass(true);
+      _base.state.tokens[startTokenIndex].isTopLevel = isTopLevel;
       return;
 
     case _types.TokenType._if:
@@ -157,6 +160,7 @@ function parseStatementContent(declaration) {
       return;
     case _types.TokenType._return:
       parseReturnStatement();
+      _base.state.tokens[startTokenIndex].isTopLevel = isTopLevel;
       return;
     case _types.TokenType._switch:
       parseSwitchStatement();
@@ -208,6 +212,7 @@ function parseStatementContent(declaration) {
         if (_tokenizer.match.call(void 0, _types.TokenType._function) && !_util.canInsertSemicolon.call(void 0, )) {
           _util.expect.call(void 0, _types.TokenType._function);
           parseFunction(functionStart, true);
+          _base.state.tokens[startTokenIndex].isTopLevel = isTopLevel;
           return;
         } else {
           _base.state.restoreFromSnapshot(snapshot);
@@ -232,11 +237,15 @@ function parseStatementContent(declaration) {
       simpleName = token.contextualKeyword;
     }
   }
+
+  _base.state.tokens[startTokenIndex].isTopLevel = isTopLevel;
+
   if (simpleName == null) {
     _util.semicolon.call(void 0, );
     return;
   }
   if (_tokenizer.eat.call(void 0, _types.TokenType.colon)) {
+    _base.state.tokens[startTokenIndex].isTopLevel = false;
     parseLabeledStatement();
   } else {
     // This was an identifier, so we might want to handle flow/typescript-specific cases.
@@ -504,9 +513,9 @@ function parseIdentifierStatement(contextualKeyword) {
   _base.state.scopeDepth--;
 } exports.parseBlock = parseBlock;
 
- function parseBlockBody(end) {
+ function parseBlockBody(end, isTopLevel) {
   while (!_tokenizer.eat.call(void 0, end) && !_base.state.error) {
-    parseStatement(true);
+    parseStatement(true, isTopLevel);
   }
 } exports.parseBlockBody = parseBlockBody;
 
diff --git a/node_modules/sucrase/dist/types/parser/tokenizer/index.d.ts b/node_modules/sucrase/dist/types/parser/tokenizer/index.d.ts
index f93c24d..cdc591e 100644
--- a/node_modules/sucrase/dist/types/parser/tokenizer/index.d.ts
+++ b/node_modules/sucrase/dist/types/parser/tokenizer/index.d.ts
@@ -51,6 +51,7 @@ export declare class Token {
     isOptionalChainEnd: boolean;
     subscriptStartIndex: number | null;
     nullishStartIndex: number | null;
+    isTopLevel?: boolean;
 }
 export declare function next(): void;
 export declare function nextTemplateToken(): void;
